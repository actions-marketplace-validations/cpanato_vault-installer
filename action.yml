# action.yml
name: vault-installer
author: cpanato
description: 'Installs Hashicorp Vault and includes it in your path'
branding:
  icon: 'package'
  color: 'blue'
# This is pinned to the last major release, we have to bump it for each action version.
inputs:
  vault-release:
    description: 'Hashicorp Vault release version to be installed'
    required: false
    default: 'v1.13.1'
  install-dir:
    description: 'Where to install the Hashicorp Vault binary'
    required: false
    default: '$HOME/.vault'
  use-sudo:
    description: 'set to true if install-dir location requires sudo privs'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    # We verify the version against a SHA **in the published action itself**, not in the GCS bucket.
    - shell: bash
      run: |
        #!/bin/bash
        # cosign install script
        shopt -s expand_aliases
        if [ -z "$NO_COLOR" ]; then
          alias log_info="echo -e \"\033[1;32mINFO\033[0m:\""
          alias log_error="echo -e \"\033[1;31mERROR\033[0m:\""
        else
          alias log_info="echo \"INFO:\""
          alias log_error="echo \"ERROR:\""
        fi
        set -e

        mkdir -p ${{ inputs.install-dir }}

        if [[ ${{ inputs.vault-release }} == "main" ]]; then
          log_info "installing cosign via 'go install' from its main version"
          GOBIN=$(go env GOPATH)/bin
          go install github.com/sigstore/cosign/cmd/cosign@main
          ln -s $GOBIN/cosign ${{ inputs.install-dir}}/cosign
          exit 0
        fi

        shaprog() {
          case ${{ runner.os }} in
            Linux)
              sha256sum $1 | cut -d' ' -f1
              ;;
            macOS)
              shasum -a256 $1 | cut -d' ' -f1
              ;;
            Windows)
              powershell -command "(Get-FileHash $1 -Algorithm SHA256 | Select-Object -ExpandProperty Hash).ToLower()"
              ;;
            *)
              log_error "unsupported OS ${{ runner.os }}"
              exit 1
              ;;
          esac
        }

        bootstrap_version='1.12.1'
        bootstrap_linux_amd64_sha='116c143de377a77a7ea455a367d5e9fe5290458e8a941a6e2dd85d92aaedba67'
        bootstrap_linux_arm_sha='fdc33fbe90daf7a496863c568fccfc98cdd664e034ae3a380c877fc6570fc7a5'
        bootstrap_linux_arm64_sha='7b35d12518729cfe3efe2007a07862934b0a6df053146ea15243f89e6b0bfbf2'
        bootstrap_darwin_amd64_sha='76d985c42a254bf16fa55fbf39092a34e27aba22942c2f829a6ce81ac5fdc40f'
        bootstrap_darwin_arm64_sha='f1fa420858eb8674416a2285cb48f9887c680eb3437235cc06c69a30178de708'
        bootstrap_windows_amd64_sha='0421531b5846a45a53547bc9a505de2b11d91d0a48fdb5aed1d77259720db5ab'
        vault_executable_name=vault

        trap "popd >/dev/null" EXIT

        pushd ${{ inputs.install-dir }} > /dev/null

        case ${{ runner.os }} in
          Linux)
            case ${{ runner.arch }} in
              X64)
                bootstrap_filename='vault_${bootstrap_version}_linux_amd64.zip'
                bootstrap_sha=${bootstrap_linux_amd64_sha}
                desired_vault_filename='vault_${{ inputs.vault-release }}_linux_amd64.zip'
                ;;

              ARM)
                bootstrap_filename='vault_${bootstrap_version}_linux_arm.zip'
                bootstrap_sha=${bootstrap_linux_arm_sha}
                desired_vault_filename='vault_${{ inputs.vault-release }}_linux_arm.zip'
                ;;

              ARM64)
                bootstrap_filename='vault_${bootstrap_version}_linux_arm64.zip'
                bootstrap_sha=${bootstrap_linux_arm64_sha}
                desired_vault_filename='vault_${{ inputs.vault-release }}_linux_arm64.zip'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          macOS)
            case ${{ runner.arch }} in
              X64)
                bootstrap_filename='vault_${bootstrap_version}_darwin_amd64.zip'
                bootstrap_sha=${bootstrap_darwin_amd64_sha}
                desired_vault_filename='vault_${{ inputs.vault-release }}_darwin_amd64.zip'
                ;;

              ARM64)
                bootstrap_filename='vault_${bootstrap_version}_darwin_arm64.zip'
                bootstrap_sha=${bootstrap_darwin_arm64_sha}
                desired_vault_filename='vault_${{ inputs.vault-release }}_darwin_arm64.zip'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          Windows)
            case ${{ runner.arch }} in
              X64)
                bootstrap_filename='vault_${bootstrap_version}_windows_amd64.zip'
                bootstrap_sha=${bootstrap_windows_amd64_sha}
                desired_vault_filename='vault_${{ inputs.vault-release }}_windows_amd64.zip'
                vault_executable_name=vault.exe
                ;;
              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;
          *)
            log_error "unsupported architecture $arch"
            exit 1
            ;;
        esac

        SUDO=
        if "${{ inputs.use-sudo }}" == "true" && command -v sudo >/dev/null; then
          SUDO=sudo
        fi

        expected_bootstrap_version_digest=${bootstrap_sha}
        log_info "Downloading bootstrap version '${bootstrap_version}' of vault to verify version to be installed...\n      https://releases.hashicorp.com/vault/${bootstrap_version}/${bootstrap_filename}"
        $SUDO curl -sL https://releases.hashicorp.com/vault/${bootstrap_version}/${bootstrap_filename}
        shaBootstrap=$(shaprog ${bootstrap_filename});
        if [[ $shaBootstrap != ${expected_bootstrap_version_digest} ]]; then
          log_error "Unable to validate vault version: '${{ inputs.vault-release }}'"
          exit 1
        fi
        $SUDO tar xvf ${bootstrap_filename} -C ${{ inputs.install-dir }}

        # If the bootstrap and specified `vault` releases are the same, we're done.
        if [[ ${{ inputs.vault-release }} == ${bootstrap_version} ]]; then
          log_info "bootstrap version successfully verified and matches requested version so nothing else to do"
          exit 0
        fi

        semver='^v([0-9]+\.){0,2}(\*|[0-9]+)$'
        if [[ ${{ inputs.vault-release }} =~ $semver ]]; then
          log_info "Custom Hashicorp Vault version '${{ inputs.vault-release }}' requested"
        else
          log_error "Unable to validate requested Hashicorp Vault version: '${{ inputs.vault-release }}'"
          exit 1
        fi

        # Download custom Hashicorp Vault
        log_info "Downloading platform-specific version '${{ inputs.vault-release }}' of cosign...\n      https://releases.hashicorp.com/vault/${{ inputs.vault-release }}/${desired_vault_filename}"
        $SUDO curl -sL https://releases.hashicorp.com/vault/${{ inputs.vault-release }}/${desired_vault_filename}
        $SUDO curl -sL https://releases.hashicorp.com/vault/${{ inputs.vault-release }}/vault_${{ inputs.vault-release }}_SHA256SUMS

        if [[ echo "$(sha256sum ${desired_vault_filename})" | sha256sum --ignore-missing --check vault_${{ inputs.vault-release }}_SHA256SUMS) ]]; then
          $SUDO rm ${{ inputs.install-dir }}/vault
          $SUDO tar xvf ${bootstrap_filename} -C ${{ inputs.install-dir }}
          log_info "Installation complete!"
        else
          log_error "Unable to validate vault version: '${{ inputs.vault-release }}'"
          exit 1
        fi
    - if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run:  echo "${{ inputs.install-dir }}" >> $GITHUB_PATH
      shell: bash
    - if: ${{ runner.os == 'Windows' }}
      run:  echo "${{ inputs.install-dir }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
